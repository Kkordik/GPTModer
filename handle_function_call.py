import json
from list_gpt_functions import gpt3_functions_set

async def handle_function_call(openai_response):
    """
    Handles function calls from GPT-3 based on user status and permissions.
    :param openai_response: The response from GPT-3.
    :return: Error message, called function, parameters.
    """
    called_function, params, error_msg = None, None, ''

    try:
        is_function_call = openai_response['choices'][0]['finish_reason'] == 'function_call'
        # Check if the response contains a function call
        if is_function_call:
            called_function = openai_response['choices'][0]['message']['function_call']['name']
            # Check if the called function exists
            if called_function not in gpt3_functions_set:
                error_msg += f"Called function {called_function} doesn't exist. "
            # Get the arguments of the function call, generated by GPT
            params = json.loads(openai_response['choices'][0]['message']['function_call']['arguments'])

    except json.JSONDecodeError:
        error_msg += "Invalid JSON format in arguments. "
        params = str(openai_response['choices'][0]['message']['function_call']['arguments'])

    except Exception as e:
        error_msg += str(e) + ' '
    return is_function_call, called_function, params, error_msg
